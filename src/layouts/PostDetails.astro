---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";


import Disqus from "@/components/Disqus.astro";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  editPost,
  cover,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `/posts/${slugifyStr(title)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
  cover,
};

/* ========== Prev/Next Posts ========== */
const allPosts = posts.map(({ data: { title }, id }) => ({
  slug: id,
  title,
}));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-3xl px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    {cover && (
      <img 
        src={typeof cover === "string" ? cover : cover?.src} 
        alt={title} 
        class="w-full"
        loading="lazy"
      />
      <div class="my-8 h-0.5 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500"></div>
    )}
    
    <h1 class="inline-block text-4xl font-bold text-accent sm:text-5xl">
      {title}
    </h1>

    <div class="flex items-center space-x-4">
      <Datetime pubDatetime={pubDatetime} modDatetime={modDatetime} />
      <!-- <EditPost class="max-sm:hidden" editPost={editPost} postId={post.id} /> -->
      <ul class="flex space-x-1">
        {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
      </ul>
    </div>

    <article id="article" class="mx-auto prose mt-8 max-w-3xl text-lg sm:text-xl">
      <Content />
    </article>

    <hr class="my-8 border-dashed" />

    <!-- Previous / Back to Top / Next Buttons -->
    <div
      data-pagefind-ignore
      class="flex items-center justify-between gap-4"
    >
      <!-- 上一篇文章 -->
      <div class="flex w-full max-w-[33%] justify-start items-center">
        {
          prevPost && (
            <a
              href={`/posts/${prevPost.slug}`}
              class="flex items-center gap-1 hover:opacity-50"
            >
              <IconChevronLeft class="inline-block flex-none self-center" />
              <div class="text-lg text-accent/100">{prevPost.title}</div>
            </a>
          )
        }
      </div>

      <!-- Back to Top（始终居中） -->
      <div class="flex w-full max-w-[33%] justify-center items-center">
        <button
          id="back-to-top"
          class="focus-outline py-1 whitespace-nowrap hover:opacity-75 flex flex-col items-center"
          onclick="window.scrollTo({ top: 0, behavior: 'smooth' })"
        >
          <IconChevronLeft class="inline-block rotate-90 self-center" />
          <span class="mt-1 text-sm">返回顶部</span>
        </button>
      </div>   
      <!-- 下一篇文章 -->
      <div class="flex w-full max-w-[33%] justify-end items-center">
        {
          nextPost && (
            <a
              href={`/posts/${nextPost.slug}`}
              class="flex items-center gap-1 hover:opacity-50"
            >
              <div class="text-lg text-accent/100">{nextPost.title}</div>
              <IconChevronRight class="inline-block flex-none self-center" />
            </a>
          )
        }
      </div>
    </div>
    <Disqus slug={slugifyStr(title)} title={title} />
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  (function () {
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-2 w-full bg-background";

    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressContainer.appendChild(progressBar);

    document.body.appendChild(progressContainer);

    let ticking = false;

    function updateScrollProgress() {
      if (!ticking) {
        requestAnimationFrame(() => {
          const winScroll =
            document.documentElement.scrollTop || document.body.scrollTop;
          const height =
            document.documentElement.scrollHeight -
            document.documentElement.clientHeight;
          const scrolled = (winScroll / height) * 100;
          progressBar.style.width = scrolled + "%";
          ticking = false;
        });
        ticking = true;
      }
    }

    document.addEventListener("scroll", updateScrollProgress);
  })();


  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const codeBlocks = Array.from(document.querySelectorAll("pre code")).map((code) => code.parentElement);

    for (const codeBlock of codeBlocks) {
      // 创建包裹容器
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";
      
      // 创建复制按钮
      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-muted px-2 py-1 text-xs leading-4 text-foreground font-medium";
      copyButton.textContent = "Copy";

      // 重新组织 DOM 结构
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);
      wrapper.appendChild(copyButton);

      // 绑定点击事件
      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const text = block.querySelector("code")?.innerText.trim() || "";

      await navigator.clipboard.writeText(text);

      // 视觉反馈
      button.dataset.copied = "true";
      button.textContent = "Copied";

      setTimeout(() => {
        button.dataset.copied = "false";
        button.textContent = "Copy";
      }, 700);
    }
  }

  attachCopyButtons();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" }),
    window.DisqusWidget.init()
  );
</script>